{'seed': 2022, 'root_path': '.', 'kam_path': './data/Kamitani/npz', 'bold5000_path': './data/BOLD5000', 'roi': 'VC', 'patch_size': 16, 'pretrain_gm_path': './pretrains/ldm/label2img', 'dataset': 'GOD', 'kam_subs': ['sbj_3'], 'bold5000_subs': ['CSI1'], 'pretrain_mbm_path': './pretrains/GOD/fmri_encoder.pth', 'img_size': 256, 'batch_size': 5, 'lr': 5.3e-05, 'num_epoch': 500, 'precision': 32, 'accumulate_grad': 1, 'crop_ratio': 0.2, 'global_pool': False, 'use_time_cond': True, 'eval_avg': True, 'num_samples': 5, 'ddim_steps': 250, 'HW': None, 'model_meta': None, 'checkpoint_path': None, 'output_path': './results/generation/14-03-2023-17-36-51'}
LatentDiffusion: Running in eps-prediction mode
DiffusionWrapper has 401.32 M params.
making attention of type 'vanilla' with 512 in_channels
Working with z of shape (1, 3, 64, 64) = 12288 dimensions.
making attention of type 'vanilla' with 512 in_channels
Position interpolate from 262 to 291
missing keys: ['decoder_pos_embed', 'decoder_embed.weight', 'decoder_embed.bias', 'decoder_blocks.0.norm1.weight', 'decoder_blocks.0.norm1.bias', 'decoder_blocks.0.attn.qkv.weight', 'decoder_blocks.0.attn.qkv.bias', 'decoder_blocks.0.attn.proj.weight', 'decoder_blocks.0.attn.proj.bias', 'decoder_blocks.0.norm2.weight', 'decoder_blocks.0.norm2.bias', 'decoder_blocks.0.mlp.fc1.weight', 'decoder_blocks.0.mlp.fc1.bias', 'decoder_blocks.0.mlp.fc2.weight', 'decoder_blocks.0.mlp.fc2.bias', 'decoder_blocks.1.norm1.weight', 'decoder_blocks.1.norm1.bias', 'decoder_blocks.1.attn.qkv.weight', 'decoder_blocks.1.attn.qkv.bias', 'decoder_blocks.1.attn.proj.weight', 'decoder_blocks.1.attn.proj.bias', 'decoder_blocks.1.norm2.weight', 'decoder_blocks.1.norm2.bias', 'decoder_blocks.1.mlp.fc1.weight', 'decoder_blocks.1.mlp.fc1.bias', 'decoder_blocks.1.mlp.fc2.weight', 'decoder_blocks.1.mlp.fc2.bias', 'decoder_blocks.2.norm1.weight', 'decoder_blocks.2.norm1.bias', 'decoder_blocks.2.attn.qkv.weight', 'decoder_blocks.2.attn.qkv.bias', 'decoder_blocks.2.attn.proj.weight', 'decoder_blocks.2.attn.proj.bias', 'decoder_blocks.2.norm2.weight', 'decoder_blocks.2.norm2.bias', 'decoder_blocks.2.mlp.fc1.weight', 'decoder_blocks.2.mlp.fc1.bias', 'decoder_blocks.2.mlp.fc2.weight', 'decoder_blocks.2.mlp.fc2.bias', 'decoder_blocks.3.norm1.weight', 'decoder_blocks.3.norm1.bias', 'decoder_blocks.3.attn.qkv.weight', 'decoder_blocks.3.attn.qkv.bias', 'decoder_blocks.3.attn.proj.weight', 'decoder_blocks.3.attn.proj.bias', 'decoder_blocks.3.norm2.weight', 'decoder_blocks.3.norm2.bias', 'decoder_blocks.3.mlp.fc1.weight', 'decoder_blocks.3.mlp.fc1.bias', 'decoder_blocks.3.mlp.fc2.weight', 'decoder_blocks.3.mlp.fc2.bias', 'decoder_blocks.4.norm1.weight', 'decoder_blocks.4.norm1.bias', 'decoder_blocks.4.attn.qkv.weight', 'decoder_blocks.4.attn.qkv.bias', 'decoder_blocks.4.attn.proj.weight', 'decoder_blocks.4.attn.proj.bias', 'decoder_blocks.4.norm2.weight', 'decoder_blocks.4.norm2.bias', 'decoder_blocks.4.mlp.fc1.weight', 'decoder_blocks.4.mlp.fc1.bias', 'decoder_blocks.4.mlp.fc2.weight', 'decoder_blocks.4.mlp.fc2.bias', 'decoder_blocks.5.norm1.weight', 'decoder_blocks.5.norm1.bias', 'decoder_blocks.5.attn.qkv.weight', 'decoder_blocks.5.attn.qkv.bias', 'decoder_blocks.5.attn.proj.weight', 'decoder_blocks.5.attn.proj.bias', 'decoder_blocks.5.norm2.weight', 'decoder_blocks.5.norm2.bias', 'decoder_blocks.5.mlp.fc1.weight', 'decoder_blocks.5.mlp.fc1.bias', 'decoder_blocks.5.mlp.fc2.weight', 'decoder_blocks.5.mlp.fc2.bias', 'decoder_blocks.6.norm1.weight', 'decoder_blocks.6.norm1.bias', 'decoder_blocks.6.attn.qkv.weight', 'decoder_blocks.6.attn.qkv.bias', 'decoder_blocks.6.attn.proj.weight', 'decoder_blocks.6.attn.proj.bias', 'decoder_blocks.6.norm2.weight', 'decoder_blocks.6.norm2.bias', 'decoder_blocks.6.mlp.fc1.weight', 'decoder_blocks.6.mlp.fc1.bias', 'decoder_blocks.6.mlp.fc2.weight', 'decoder_blocks.6.mlp.fc2.bias', 'decoder_blocks.7.norm1.weight', 'decoder_blocks.7.norm1.bias', 'decoder_blocks.7.attn.qkv.weight', 'decoder_blocks.7.attn.qkv.bias', 'decoder_blocks.7.attn.proj.weight', 'decoder_blocks.7.attn.proj.bias', 'decoder_blocks.7.norm2.weight', 'decoder_blocks.7.norm2.bias', 'decoder_blocks.7.mlp.fc1.weight', 'decoder_blocks.7.mlp.fc1.bias', 'decoder_blocks.7.mlp.fc2.weight', 'decoder_blocks.7.mlp.fc2.bias', 'decoder_norm.weight', 'decoder_norm.bias', 'decoder_pred.weight', 'decoder_pred.bias']
unexpected keys: ['mask_token']
LatentDiffusion(
  (model): DiffusionWrapper(
    (diffusion_model): UNetModel(
      (time_embed): Sequential(
        (0): Linear(in_features=192, out_features=768, bias=True)
        (1): SiLU()
        (2): Linear(in_features=768, out_features=768, bias=True)
      )
      (time_embed_condtion): Sequential(
        (0): Conv1d(77, 38, kernel_size=(1,), stride=(1,))
        (1): Conv1d(38, 1, kernel_size=(1,), stride=(1,))
        (2): Linear(in_features=512, out_features=768, bias=True)
      )
      (input_blocks): ModuleList(
        (0): TimestepEmbedSequential(
          (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (1): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=192, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
        )
        (2): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=192, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
        )
        (3): TimestepEmbedSequential(
          (0): Downsample(
            (op): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
        (4): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=384, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 384, eps=1e-06, affine=True)
            (proj_in): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=384, out_features=384, bias=False)
                  (to_v): Linear(in_features=384, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=384, out_features=3072, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1536, out_features=384, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=512, out_features=384, bias=False)
                  (to_v): Linear(in_features=512, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (5): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=384, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 384, eps=1e-06, affine=True)
            (proj_in): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=384, out_features=384, bias=False)
                  (to_v): Linear(in_features=384, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=384, out_features=3072, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1536, out_features=384, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=512, out_features=384, bias=False)
                  (to_v): Linear(in_features=512, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (6): TimestepEmbedSequential(
          (0): Downsample(
            (op): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
        (7): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(384, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=576, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(384, 576, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 576, eps=1e-06, affine=True)
            (proj_in): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=576, out_features=576, bias=False)
                  (to_v): Linear(in_features=576, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=576, out_features=4608, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2304, out_features=576, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=512, out_features=576, bias=False)
                  (to_v): Linear(in_features=512, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (8): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=576, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 576, eps=1e-06, affine=True)
            (proj_in): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=576, out_features=576, bias=False)
                  (to_v): Linear(in_features=576, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=576, out_features=4608, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2304, out_features=576, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=512, out_features=576, bias=False)
                  (to_v): Linear(in_features=512, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (9): TimestepEmbedSequential(
          (0): Downsample(
            (op): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
        (10): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(576, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=960, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(576, 960, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 960, eps=1e-06, affine=True)
            (proj_in): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=960, out_features=960, bias=False)
                  (to_v): Linear(in_features=960, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=960, out_features=7680, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=3840, out_features=960, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=512, out_features=960, bias=False)
                  (to_v): Linear(in_features=512, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (11): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=960, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 960, eps=1e-06, affine=True)
            (proj_in): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=960, out_features=960, bias=False)
                  (to_v): Linear(in_features=960, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=960, out_features=7680, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=3840, out_features=960, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=512, out_features=960, bias=False)
                  (to_v): Linear(in_features=512, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
      (middle_block): TimestepEmbedSequential(
        (0): ResBlock(
          (in_layers): Sequential(
            (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
            (1): SiLU()
            (2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (h_upd): Identity()
          (x_upd): Identity()
          (emb_layers): Sequential(
            (0): SiLU()
            (1): Linear(in_features=768, out_features=960, bias=True)
          )
          (out_layers): Sequential(
            (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
            (1): SiLU()
            (2): Dropout(p=0, inplace=False)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip_connection): Identity()
        )
        (1): SpatialTransformer(
          (norm): GroupNorm(32, 960, eps=1e-06, affine=True)
          (proj_in): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
          (transformer_blocks): ModuleList(
            (0): BasicTransformerBlock(
              (attn1): CrossAttention(
                (to_q): Linear(in_features=960, out_features=960, bias=False)
                (to_k): Linear(in_features=960, out_features=960, bias=False)
                (to_v): Linear(in_features=960, out_features=960, bias=False)
                (to_out): Sequential(
                  (0): Linear(in_features=960, out_features=960, bias=True)
                  (1): Dropout(p=0.0, inplace=False)
                )
              )
              (ff): FeedForward(
                (net): Sequential(
                  (0): GEGLU(
                    (proj): Linear(in_features=960, out_features=7680, bias=True)
                  )
                  (1): Dropout(p=0.0, inplace=False)
                  (2): Linear(in_features=3840, out_features=960, bias=True)
                )
              )
              (attn2): CrossAttention(
                (to_q): Linear(in_features=960, out_features=960, bias=False)
                (to_k): Linear(in_features=512, out_features=960, bias=False)
                (to_v): Linear(in_features=512, out_features=960, bias=False)
                (to_out): Sequential(
                  (0): Linear(in_features=960, out_features=960, bias=True)
                  (1): Dropout(p=0.0, inplace=False)
                )
              )
              (norm1): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
              (norm3): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
            )
          )
          (proj_out): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): ResBlock(
          (in_layers): Sequential(
            (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
            (1): SiLU()
            (2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (h_upd): Identity()
          (x_upd): Identity()
          (emb_layers): Sequential(
            (0): SiLU()
            (1): Linear(in_features=768, out_features=960, bias=True)
          )
          (out_layers): Sequential(
            (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
            (1): SiLU()
            (2): Dropout(p=0, inplace=False)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip_connection): Identity()
        )
      )
      (output_blocks): ModuleList(
        (0): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 1920, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(1920, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=960, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(1920, 960, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 960, eps=1e-06, affine=True)
            (proj_in): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=960, out_features=960, bias=False)
                  (to_v): Linear(in_features=960, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=960, out_features=7680, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=3840, out_features=960, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=512, out_features=960, bias=False)
                  (to_v): Linear(in_features=512, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (1): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 1920, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(1920, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=960, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(1920, 960, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 960, eps=1e-06, affine=True)
            (proj_in): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=960, out_features=960, bias=False)
                  (to_v): Linear(in_features=960, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=960, out_features=7680, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=3840, out_features=960, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=512, out_features=960, bias=False)
                  (to_v): Linear(in_features=512, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (2): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 1536, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(1536, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=960, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(1536, 960, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 960, eps=1e-06, affine=True)
            (proj_in): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=960, out_features=960, bias=False)
                  (to_v): Linear(in_features=960, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=960, out_features=7680, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=3840, out_features=960, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=960, out_features=960, bias=False)
                  (to_k): Linear(in_features=512, out_features=960, bias=False)
                  (to_v): Linear(in_features=512, out_features=960, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=960, out_features=960, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((960,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(960, 960, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Upsample(
            (conv): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 1536, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(1536, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=576, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(1536, 576, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 576, eps=1e-06, affine=True)
            (proj_in): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=576, out_features=576, bias=False)
                  (to_v): Linear(in_features=576, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=576, out_features=4608, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2304, out_features=576, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=512, out_features=576, bias=False)
                  (to_v): Linear(in_features=512, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (4): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 1152, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(1152, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=576, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(1152, 576, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 576, eps=1e-06, affine=True)
            (proj_in): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=576, out_features=576, bias=False)
                  (to_v): Linear(in_features=576, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=576, out_features=4608, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2304, out_features=576, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=512, out_features=576, bias=False)
                  (to_v): Linear(in_features=512, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (5): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(960, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=576, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(960, 576, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 576, eps=1e-06, affine=True)
            (proj_in): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=576, out_features=576, bias=False)
                  (to_v): Linear(in_features=576, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=576, out_features=4608, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2304, out_features=576, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=576, out_features=576, bias=False)
                  (to_k): Linear(in_features=512, out_features=576, bias=False)
                  (to_v): Linear(in_features=512, out_features=576, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=576, out_features=576, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((576,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(576, 576, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Upsample(
            (conv): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (6): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 960, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(960, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=384, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(960, 384, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 384, eps=1e-06, affine=True)
            (proj_in): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=384, out_features=384, bias=False)
                  (to_v): Linear(in_features=384, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=384, out_features=3072, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1536, out_features=384, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=512, out_features=384, bias=False)
                  (to_v): Linear(in_features=512, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (7): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 768, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(768, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=384, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 384, eps=1e-06, affine=True)
            (proj_in): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=384, out_features=384, bias=False)
                  (to_v): Linear(in_features=384, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=384, out_features=3072, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1536, out_features=384, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=512, out_features=384, bias=False)
                  (to_v): Linear(in_features=512, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (8): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(576, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=384, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(576, 384, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): SpatialTransformer(
            (norm): GroupNorm(32, 384, eps=1e-06, affine=True)
            (proj_in): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=384, out_features=384, bias=False)
                  (to_v): Linear(in_features=384, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): Sequential(
                    (0): GEGLU(
                      (proj): Linear(in_features=384, out_features=3072, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1536, out_features=384, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=384, out_features=384, bias=False)
                  (to_k): Linear(in_features=512, out_features=384, bias=False)
                  (to_v): Linear(in_features=512, out_features=384, bias=False)
                  (to_out): Sequential(
                    (0): Linear(in_features=384, out_features=384, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Upsample(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (9): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 576, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(576, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=192, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(576, 192, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (10): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(384, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=192, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (11): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(384, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=768, out_features=192, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0, inplace=False)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
      (out): Sequential(
        (0): GroupNorm32(32, 192, eps=1e-05, affine=True)
        (1): SiLU()
        (2): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (first_stage_model): VQModelInterface(
    (encoder): Encoder(
      (conv_in): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (down): ModuleList(
        (0): Module(
          (block): ModuleList(
            (0): ResnetBlock(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (1): ResnetBlock(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (attn): ModuleList()
          (downsample): Downsample(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
          )
        )
        (1): Module(
          (block): ModuleList(
            (0): ResnetBlock(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nin_shortcut): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (attn): ModuleList()
          (downsample): Downsample(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2))
          )
        )
        (2): Module(
          (block): ModuleList(
            (0): ResnetBlock(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nin_shortcut): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (attn): ModuleList()
        )
      )
      (mid): Module(
        (block_1): ResnetBlock(
          (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (attn_1): AttnBlock(
          (norm): GroupNorm(32, 512, eps=1e-06, affine=True)
          (q): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (k): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (v): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (proj_out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
        (block_2): ResnetBlock(
          (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (norm_out): GroupNorm(32, 512, eps=1e-06, affine=True)
      (conv_out): Conv2d(512, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (decoder): Decoder(
      (conv_in): Conv2d(3, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mid): Module(
        (block_1): ResnetBlock(
          (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (attn_1): AttnBlock(
          (norm): GroupNorm(32, 512, eps=1e-06, affine=True)
          (q): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (k): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (v): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (proj_out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
        (block_2): ResnetBlock(
          (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (up): ModuleList(
        (0): Module(
          (block): ModuleList(
            (0): ResnetBlock(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nin_shortcut): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (2): ResnetBlock(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (attn): ModuleList()
        )
        (1): Module(
          (block): ModuleList(
            (0): ResnetBlock(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nin_shortcut): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (2): ResnetBlock(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (attn): ModuleList()
          (upsample): Upsample(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): Module(
          (block): ModuleList(
            (0): ResnetBlock(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (1): ResnetBlock(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (2): ResnetBlock(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (attn): ModuleList()
          (upsample): Upsample(
            (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (norm_out): GroupNorm(32, 128, eps=1e-06, affine=True)
      (conv_out): Conv2d(128, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (loss): Identity()
    (quantize): VectorQuantizer(
      (embedding): Embedding(8192, 3)
    )
    (quant_conv): Conv2d(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (post_quant_conv): Conv2d(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
  (cond_stage_model): cond_stage_model(
    (mae): fmri_encoder(
      (patch_embed): PatchEmbed1D(
        (proj): Conv1d(1, 1024, kernel_size=(16,), stride=(16,))
      )
      (blocks): ModuleList(
        (0): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (1): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (2): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (3): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (4): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (5): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (6): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (7): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (8): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (9): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (10): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (11): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (12): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (13): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (14): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (15): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (16): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (17): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (18): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (19): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (20): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (21): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (22): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (23): Block(
          (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=1024, out_features=3072, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1024, out_features=1024, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1024, out_features=1024, bias=True)
            (act): GELU(approximate=none)
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1024, out_features=1024, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    )
    (channel_mapper): Sequential(
      (0): Conv1d(291, 145, kernel_size=(1,), stride=(1,))
      (1): Conv1d(145, 77, kernel_size=(1,), stride=(1,))
    )
    (dim_mapper): Linear(in_features=1024, out_features=512, bias=True)
  )
)
> /userhome/cs2/ethanlii/mind-vis/code/dc_ldm/ldm_for_fmri.py(97)finetune()
-> print('\n##### Stage One: only optimize conditional encoders #####')
[?2004h(Pdb) [?2004l
--KeyboardInterrupt--
[?2004h(Pdb) [?2004l
--KeyboardInterrupt--
[?2004h(Pdb) [?2004l
--KeyboardInterrupt--
[?2004h(Pdb) cc[?2004l
--KeyboardInterrupt--
[?2004h(Pdb) c[?2004l
--KeyboardInterrupt--
[?2004h(Pdb) [?2004l
--KeyboardInterrupt--
[?2004h(Pdb) [?2004l
--KeyboardInterrupt--
[?2004h(Pdb) 
[?2004l
[?2004h(Pdb) [?2004l
--KeyboardInterrupt--
[?2004h(Pdb) 
[?2004l
[?2004h(Pdb) [?2004l
--KeyboardInterrupt--
[?2004h(Pdb) 
[?2004l
[?2004h(Pdb) c
[?2004l

##### Stage One: only optimize conditional encoders #####

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/module.py(925)convert()->tensor([[-0.0...vice='cuda:0')
-> return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking)
[?2004h(Pdb) [?2004l
--KeyboardInterrupt--
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/module.py(925)convert()->tensor([[-0.0...vice='cuda:0')
-> return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/module.py(925)convert()->tensor([[ 0.0...vice='cuda:0')
-> return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking)
[?2004h(Pdb) 
[?2004l
LatentDiffusion: Only optimizing conditioner params!

Sanity Checking: 0it [00:00, ?it/s]
Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/pytorch_lightning/utilities/fetching.py(184)__next__()->{'fmri': tensor([[[ 1....vice='cuda:0'), 'image': tensor([[[[-0...torch.float64)}
-> return self.fetching_function()
[?2004h(Pdb) 
[?2004l

Sanity Checking:   0%|                                                                                            | 0/1 [00:00<?, ?it/s]
Sanity Checking DataLoader 0:   0%|                                                                               | 0/1 [00:00<?, ?it/s]rendering 3 examples in 250 steps.

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/conv.py(303)_conv_forward()->tensor([[[ 0....vice='cuda:0')
-> return F.conv1d(input, weight, bias, self.stride,
[?2004h(Pdb) c
[?2004l
Data shape for PLMS sampling is (3, 3, 64, 64)
Running PLMS Sampling with 250 timesteps

Program interrupted. (Use 'cont' to resume).
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/einops/einops.py(211)apply()
-> return backend.reshape(tensor, final_shapes)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/linear.py(114)forward()->tensor([[[ 0....vice='cuda:0')
-> return F.linear(input, self.weight, self.bias)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/linear.py(114)forward()->tensor([[[-0....vice='cuda:0')
-> return F.linear(input, self.weight, self.bias)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/functional.py(2503)layer_norm()->tensor([[[ 0....vice='cuda:0')
-> return torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/linear.py(114)forward()->tensor([[[ 0....vice='cuda:0')
-> return F.linear(input, self.weight, self.bias)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
> /userhome/cs2/ethanlii/mind-vis/code/dc_ldm/models/diffusion/plms.py(203)get_x_prev_and_pred_x0()
-> a_prev = torch.full((b, 1, 1, 1), alphas_prev[index], device=device)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/conv.py(453)_conv_forward()->tensor([[[[-6...vice='cuda:0')
-> return F.conv2d(input, weight, bias, self.stride,
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
> /userhome/cs2/ethanlii/mind-vis/code/dc_ldm/models/diffusion/plms.py(203)get_x_prev_and_pred_x0()
-> a_prev = torch.full((b, 1, 1, 1), alphas_prev[index], device=device)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/conv.py(453)_conv_forward()->tensor([[[[ 9...vice='cuda:0')
-> return F.conv2d(input, weight, bias, self.stride,
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/conv.py(453)_conv_forward()->tensor([[[[-2...vice='cuda:0')
-> return F.conv2d(input, weight, bias, self.stride,
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/einops/_backends.py(28)get_backend()
-> if backend.is_appropriate_type(tensor):
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/conv.py(453)_conv_forward()->tensor([[[[ 9...vice='cuda:0')
-> return F.conv2d(input, weight, bias, self.stride,
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
> /userhome/cs2/ethanlii/mind-vis/code/dc_ldm/models/diffusion/plms.py(217)get_x_prev_and_pred_x0()
-> return x_prev, pred_x0
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/functional.py(360)einsum()->tensor([[[-0....vice='cuda:0')
-> return _VF.einsum(equation, operands)  # type: ignore[attr-defined]
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
> /userhome/cs2/ethanlii/mind-vis/code/dc_ldm/models/diffusion/plms.py(203)get_x_prev_and_pred_x0()
-> a_prev = torch.full((b, 1, 1, 1), alphas_prev[index], device=device)
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/functional.py(360)einsum()->tensor([[[-1....vice='cuda:0')
-> return _VF.einsum(equation, operands)  # type: ignore[attr-defined]
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/autograd/grad_mode.py(229)__init__()
-> self.mode = mode
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/conv.py(303)_conv_forward()->tensor([[[-0....vice='cuda:0')
-> return F.conv1d(input, weight, bias, self.stride,
[?2004h(Pdb) 
[?2004l

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/module.py(1813)named_modules()->None
-> for name, module in self._modules.items():
[?2004h(Pdb) 
[?2004l
rendering 3 examples in 250 steps.
Data shape for PLMS sampling is (3, 3, 64, 64)
Running PLMS Sampling with 250 timesteps
rendering 3 examples in 250 steps.
Data shape for PLMS sampling is (3, 3, 64, 64)
Running PLMS Sampling with 250 timesteps
rendering 3 examples in 250 steps.
Data shape for PLMS sampling is (3, 3, 64, 64)
Running PLMS Sampling with 250 timesteps

Program interrupted. (Use 'cont' to resume).
--Return--
> /userhome/cs2/ethanlii/anaconda3/envs/mind-vis/lib/python3.8/site-packages/torch/nn/modules/conv.py(453)_conv_forward()->tensor([[[[-2...vice='cuda:0')
-> return F.conv2d(input, weight, bias, self.stride,
[?2004h(Pdb) 
[K
(Pdb) 
[?2004l
